<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jeremy Kao</title>
    <link>https://jeremykao.com/</link>
    <description>Recent content on Jeremy Kao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeremykao.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Render LaTeX using KaTeX</title>
      <link>https://jeremykao.com/posts/render-latex-using-katex/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/posts/render-latex-using-katex/</guid>
      <description>Enable katex by adding katex = &amp;quot;true&amp;quot; to the front matter
+++ katex = &amp;#34;true&amp;#34; +++ If you want to enable KaTeX or MathJax for all post, add katex = ture or math = true in config.toml in [params] section.
It&#39;s almost a dropin alternative to the mathjax solution,you should just choose one of them.
Inline math looks like this
This is text with inline math $\sum_{n=1}^{\infty}2^{-n}=1$ This is text with inline math $\sum_{n=1}^{\infty} 2^{-n} = 1$</description>
    </item>
    
    <item>
      <title>Hugo coder wiki</title>
      <link>https://jeremykao.com/posts/hugo-coder-wiki/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/posts/hugo-coder-wiki/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Various Products at Abnormal Security</title>
      <link>https://jeremykao.com/projects/20190101-abx/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20190101-abx/</guid>
      <description>I&#39;ve worked on quite a few projects here since November 2018. Back then, we had no paying customers yet, but now we&#39;ve got a couple, and I have a lot more coworkers (yay!). I won&#39;t really go into details, but you can find more information on our website: https://www.abnormalsecurity.com. Or you can contact me if you&#39;d like to know more.</description>
    </item>
    
    <item>
      <title>Dummy</title>
      <link>https://jeremykao.com/posts/dummy/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/posts/dummy/</guid>
      <description>Nada para ver aqui!</description>
    </item>
    
    <item>
      <title>Various Desktop Feed Features</title>
      <link>https://jeremykao.com/projects/20180101-li-desktop-features/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20180101-li-desktop-features/</guid>
      <description>I worked on the Desktop feed for quite a while. Performance, i18n, and accessiblity were always a work-in-progress for a product that receives millions of views a day across the world in 20+ languages/locales.
Here are some of the interesting projects I worked on:
New way of rendering feed updates Developer velocity was also a focus for a period of time. Now that we had the feed served across 4 platforms (android, ios, mobile-web, desktop), it was always a huge effort to create a new feed update.</description>
    </item>
    
    <item>
      <title>Deprecating the old Desktop Feed and a 13&#43; year old monorepo</title>
      <link>https://jeremykao.com/projects/20170101-li-deprecate-hp/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20170101-li-deprecate-hp/</guid>
      <description>With the launch of the new Desktop experience, efforts to remove the old desktop were put in place. Due to the slow ramp of the desktop experience (performance in various countries/markets was a challenge), the old desktop feed still lived around while most folks used the new desktop experience.
Eventually though, it came time to deprecate this service, so I worked a lot on analyzing traffic to make sure nothing was redirecting to the old homepage.</description>
    </item>
    
    <item>
      <title>Theme Demo</title>
      <link>https://jeremykao.com/posts/theme-demo/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/posts/theme-demo/</guid>
      <description>Style Demo h1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading  This is bold text
This is bold text
This is italic text
This is italic text
Deleted text
This is text with inline math $\sum_{n=1}^{\infty} 2^{-n} = 1$ and with math blocks:
$$ \sum_{n=1}^{\infty} 2^{-n} = 1 $$
   Heading Another heading     text text   text text   text text     Block quotes are written like so.</description>
    </item>
    
    <item>
      <title>New Desktop LinkedIn Feed w/ Ember.js</title>
      <link>https://jeremykao.com/projects/20160801-li-desktop/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20160801-li-desktop/</guid>
      <description>After the launch of the native/mobile web applications, we had to build the desktop experience on Ember.js. Prior to this, every LinkedIn product was its own separate project. Some were server-side rendered, some used Backbone-Marionette, some used a custom built JS framework. Now, all LinkedIn consumer products were to be within the same Ember.js application, served as a single page app.
Since we had a mobile-web application, the strategy was to &amp;ldquo;extend&amp;rdquo; this for the desktop application.</description>
    </item>
    
    <item>
      <title>LinkedIn Messaging on Mobile-Web</title>
      <link>https://jeremykao.com/projects/20160501-li-mobile-web/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20160501-li-mobile-web/</guid>
      <description>During my time maintaining the LinkedIn Desktop feed, I was &amp;ldquo;loaned&amp;rdquo; to the Messaging team to help build the new messaging experience on mobile web. I joined 2 other folks to help work on this product (Sponsored InMail, Share as Message from Feed, etc.).
This was a fast-paced environment, and I learned a lot about Ember 2.0. Developing for mobile-web was also quite interesting for me because performance is limited (network latency, slower cpu) and layout is a lot more variable (lots more variation in screen sizes) than desktop.</description>
    </item>
    
    <item>
      <title>Threaded Likes/Comments on Desktop LinkedIn Feed</title>
      <link>https://jeremykao.com/projects/20150801-li-spindle/</link>
      <pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20150801-li-spindle/</guid>
      <description>While I was maintaining Linkedin&#39;s desktop feed experience, I also helped add threaded likes and comments to the desktop feed. Other folks were adding it to the new native Android/iOS applications and the new mobile-web experience.
Threaded likes and comments allowed users to like a comment and comment on a comment and surfaced various new updates related to those actions.
This was a fun project because it required a lot of thought into making a comment more like an update, which itself was already complex due to its recursive nature (updates can contain other updates when someone likes/comments/reshares an update).</description>
    </item>
    
    <item>
      <title>LinkedIn Feed/Homepage Maintainence</title>
      <link>https://jeremykao.com/projects/20150501-li-hp/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20150501-li-hp/</guid>
      <description>Starting mid 2015, LinkedIn embarked on an ambitious project to rewrite a good portion of their consumer experiences. The previous Mobile experience relied a bit on webviews backed by a nodejs service, so the Android and iOS apps were both rewritten in the platform native languages: Swift and Java. There was also not a good mobile-web application, so a mobile-web Ember.js application was also written.
On a team of 3 Frontend developers for Feed, 2 worked on this new mobile-web experience, while I handled maintaining the desktop LinkedIn feed experience.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://jeremykao.com/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&#39;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&#39;t cover using CSS to style your theme.
We&#39;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>LinkedIn Messaging Prototype</title>
      <link>https://jeremykao.com/projects/20140701-li-msg/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20140701-li-msg/</guid>
      <description>Prior to 2015, LinkedIn had an email-like messaging system, where each message received was its own distinct item in the inbox.
There was a new initiative to change this to be threaded, more like a chat system. As part of my intern project, I worked on writing a new web application that would support this. This was also one of the first experiments of Ember.js at LinkedIn.
This project was initially written in Backbone.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://jeremykao.com/posts/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/posts/hugo-template-primer/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://jeremykao.com/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://jeremykao.com/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/posts/migrate-from-jekyll/</guid>
      <description>Table of Contents  Move static content to static Create your Hugo configuration file Set your configuration publish folder to site Convert Jekyll templates to Hugo templates Convert Jekyll plugins to Hugo shortcodes  Implementation Usage   Finishing Touches  Fix Content Clean Up   A practical example in a diff  Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output.</description>
    </item>
    
    <item>
      <title>TurboTax Support Site</title>
      <link>https://jeremykao.com/projects/20130701-turbotax-support/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/projects/20130701-turbotax-support/</guid>
      <description>As a summer intern for Intuit&#39;s TurboTax in San Diego, I was tasked with helping build out the new support website. This project was particularly interesting because some members on my team were migrating a bunch of the old app to the cloud, and I was building a new app with Angular.js.
I learned quite a bit of Angular 1.0, which I thought was AWESOME, until I got to $scopes. Very soon, Angular 1.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://jeremykao.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jeremykao.com/about/</guid>
      <description>Hey! Thanks for visiting my personal website.
I&#39;m a full stack web developer in the San Francisco Bay Area. My area of expertise is building web applications. Although I can work up and down the stack, UI/UX/Product is where I prefer to spend most of my time.
I eventually want to start a business and perhaps own a restaurant or bakery.
In my free time, you can usually find me exploring nature, learning something new, expressing myself via some art form, or cooking a delicious meal.</description>
    </item>
    
  </channel>
</rss>